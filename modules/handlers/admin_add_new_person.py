from aiogram import types
from main import dp
from modules import workWF, sqLite
from aiogram.dispatcher.filters import Text
from modules.dispatcher import bot, Admin_Form
from modules.keyboards import admin_kb_start, back_reply, add_person_reply, start_admin_kb


# Start menu admin
@dp.callback_query_handler(state=Admin_Form.phone_input, text='back')
@dp.callback_query_handler(state=Admin_Form.admin_first_menu, text='add_person')
async def add_person_start(call: types.CallbackQuery):
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ", reply_markup=admin_kb_start)
    await Admin_Form.name_input.set()


# Start menu admin
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.type_input)
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.phone_input_search)
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.manual_input)
async def add_person_start(message: types.Message):
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ", reply_markup=admin_kb_start)
    await Admin_Form.name_input.set()


# Telegram_ID input Callback
@dp.callback_query_handler(state=Admin_Form.name_input, text='manual_input')
async def phone(call: types.CallbackQuery):
    await call.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º ID. \n–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n'
                                   '–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º id. '
                                   '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –∑–∞—è–≤–∫—É.',
                              reply_markup=back_reply)
    await Admin_Form.manual_input.set()


# Telegram_ID input
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.phone_input)
@dp.message_handler(state=Admin_Form.name_input)
async def start_menu(message: types.Message):
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –¢–µ–ª–µ–≥—Ä–∞–º ID. \n–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.\n'
                              '–ï—Å–ª–∏ –≤—ã –Ω–µ –∑–Ω–∞–µ—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º id. '
                              '–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º –∑–∞—è–≤–∫—É.', reply_markup=back_reply)
    await Admin_Form.manual_input.set()


# Phone input callback
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.surname_input)
@dp.message_handler(state=Admin_Form.manual_input)
async def start_menu(message: types.Message):
    telegram_id = int(workWF.read_admin())
    if message.text.isdigit() or message.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n"
                                  "–ø—Ä–∏–º–µ—Ä: +7123456789", reply_markup=back_reply)
        if message.text.isdigit():
            sqLite.insert_info(table_name='users', name=f'data', date=f'{str(message.text)}', telegram_id=telegram_id)
            sqLite.insert_first_note(telegram_id=message.text)
        else:
            pass
        await Admin_Form.phone_input.set()
    else:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.', reply_markup=back_reply)


# Surname input
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.telegram_id_input)
@dp.message_handler(state=Admin_Form.phone_input)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]
    sqLite.insert_info(table_name='users', name=f'phone_number', date=f'{str(message.text)}', telegram_id=int(user_id))
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –§–∞–º–∏–ª–∏—é.', reply_markup=back_reply)
    await Admin_Form.surname_input.set()


# Name input
@dp.message_handler(state=Admin_Form.surname_input)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]
    sqLite.insert_info(table_name='users', name=f'surname', date=f'{str(message.text)}', telegram_id=int(user_id))
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ò–º—è.', reply_markup=back_reply)
    await Admin_Form.telegram_id_input.set()


# Pick a type of person
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.set_balance_investor)
@dp.message_handler(state=Admin_Form.telegram_id_input)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]
    sqLite.insert_info(table_name='users', name=f'name', date=f'{str(message.text)}', telegram_id=int(user_id))
    await message.answer(text='–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞?', reply_markup=add_person_reply)
    await Admin_Form.type_input.set()


# Add a New worker
@dp.message_handler(Text(equals='üõ† –†–∞–±–æ—á–∏–π', ignore_case=True), state=Admin_Form.type_input)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]
    sqLite.insert_info(table_name='users', name=f'user_type', date=f'worker', telegram_id=int(user_id))
    await message.answer(text='–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=types.ReplyKeyboardRemove())
    try:
        await bot.send_message(chat_id=user_id, text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –±–∞–∑—É. '
                                                     '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –Ω–æ–≤—ã–π —Ä–∞–±–æ—á–∏–π. '
                                                     '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start ')
    except:
        await message.answer(text='–¢–µ–ª–µ–≥—Ä–∞–º ID –Ω–µ–≤–µ—Ä–µ–Ω –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–æ–Ω –Ω–∞ –±–æ—Ç')
    await message.answer(text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å', reply_markup=start_admin_kb)
    await Admin_Form.admin_first_menu.set()


# Set balance of investor
@dp.message_handler(Text(equals='‚¨ÖÔ∏è –ù–∞–∑–∞–¥', ignore_case=True), state=Admin_Form.set_pool_number)
@dp.message_handler(Text(equals='üíµ –ò–Ω–≤–µ—Å—Ç–æ—Ä', ignore_case=True), state=Admin_Form.type_input)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]
    sqLite.insert_info(table_name='users', name=f'user_type', date=f'investor', telegram_id=int(user_id))
    await message.answer(text='–ó–∞–¥–∞–π—Ç–µ –±–∞–ª–∞–Ω—Å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞ –≤ RUR. \n–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.', reply_markup=back_reply)
    await Admin_Form.set_balance_investor.set()


# Set balance of investor
@dp.message_handler(state=Admin_Form.set_balance_investor)
async def start_menu(message: types.Message):
    user_id = sqLite.read_value_bu_name(name='data', table='users', telegram_id=int(workWF.read_admin()))[0]

    if message.text.isdigit():
        await message.answer(text=f'–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=types.ReplyKeyboardRemove())
        try:
            await bot.send_message(chat_id=user_id,
                                   text='–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏–ª –≤–∞—Å –≤ –±–∞–∑—É. '
                                        '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∑–∞–π—Ç–∏ –≤ –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start',
                                   reply_markup=types.ReplyKeyboardRemove())
        except:
            await message.answer(text="–¢–µ–ª–µ–≥—Ä–∞–º ID –Ω–µ –≤–µ—Ä–Ω—ã–π –ª–∏–±–æ —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –±–æ—Ç–∞")
        await message.answer(text=f'–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —á–µ–º —Ç–µ–±–µ –ø–æ–º–æ—á—å', reply_markup=start_admin_kb)
        await Admin_Form.admin_first_menu.set()
        sqLite.insert_info(table_name='users', name=f'balance', date=f'{str(message.text)}', telegram_id=int(user_id))
    else:
        await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã')


# Telegram_ID input phone
@dp.callback_query_handler(state=Admin_Form.name_input, text='input')
async def phone(call: types.CallbackQuery):
    await call.message.answer(text='–ü–æ–ª–Ω—ã–π –º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n–ø—Ä–∏–º–µ—Ä: +7123456789',
                              reply_markup=back_reply)
    await Admin_Form.phone_input_search.set()


# Telegram_ID input phone
@dp.message_handler(state=Admin_Form.phone_input_search)
async def phone(message: types.Message):
    try:
        user_id = int(sqLite.read_values_in_db_by_phone(table='users', name='phone_number', data=message.text)[0])
        sqLite.insert_info(table_name='users', name=f'data', date=f'{user_id}', telegram_id=int(workWF.read_admin()))
        await message.answer(text='–í—ã –¥–æ–±–∞–≤–ª—è–µ—Ç–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∏–ª–∏ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞?',
                             reply_markup=add_person_reply)
        await Admin_Form.type_input.set()
    except:
        await message.answer(text='–î–∞–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
